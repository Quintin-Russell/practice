Given n non-negative integers representing an elevation map where the width of each bar is 1,
compute how much water it can trap after raining.

1) visualize:





      -
  -
_   _
    1
-when there is a difference in elev, there is possibility of capturing rain



Example 1:

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1].
In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9


Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105

2) subproblem
rain holder = width * height - sum(elvs in width)
width = number of indicies bw high and low
height = min(high,low)

3) generalize
base:
  -n = 1 => return 0

2 pointers:
  -l=1; r=2
  -elvsInRange = 0
  -rainUnits = 0

  -if arr[l] > arr[r] => elvsInRange += arr[r]; r++
  -else OR if r === n rain conttainer
      width = r - l -1
      height = min(arr[l], arr[r])
      sum(elvs) = elvsInRange
      - rainUnits += wh - sum(elvs)
      - l= r; r++; elvsInRange = 0

rain = 5
elvsInRange = 6
w = 11 - 7 - 1 = 3
h = 1
rain = 3 - 6

0,1,0,2,1,0,1,3,2,1,2,1
              l       r

--------------------------------------
neetcode solution:
Plan:
  - at every index, find amt of rain that can be stored => sum rain @ each position
    - rain[i] = min(maxL,maxR) - height[i]
      -if rain[i] < 1, ignore

base: no water at end pts
  -

2 pointers: initialized at ends of arr
  -at each index:
    - rain[i] = min(maxL,maxR) - height[i]
        -if rain[i] < 1, ignore
    -update maxL and maxR
    -move pointer w/ smaller value
