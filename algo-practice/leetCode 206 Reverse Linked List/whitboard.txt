Linked list = NOT AN ARRAY
  --dynamic size
  --efficient insertion and deletion
  --no random access
  --no waste of memory
  --each member of a linked list = an obj;
    -2 properties: data and next
      --data = value
      --next = the next box in the linked list
  --connections go in 1 direction, but not the other
    --can find next member easily, but hard to find the previous
  -each node is an object that looks like: {val: __, next: Node {val:__, next: Node {val:__, next: Node {}}}}
iteratively:
-set a previous and next variable to null to keep track of values
-set up while loop: while next !== null
-store currentNode.next in next
-set currentNode.next to previous (previous will be null for the tail)
-previous = head
-head = next

-return prev; because the 'list' is stored in the next property of previous
(aka the tail)
